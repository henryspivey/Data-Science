## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- apply(x, 2, getinv)
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- df$get()
inv <- solve(data, ...)
df$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
makeCacheMatrix(m)
cacheSolve(m)
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- apply(x, 2, getinv)
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- df$get()
inv <- solve(data, ...)
df$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix(m)
head(make)
cacheSolve(m)
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- apply(x, 2, x$getinv)
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- df$get()
inv <- solve(data, ...)
df$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix(m)
cacheSolve(m)
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
print(x)
inv <- apply(x, 2, x$getinv)
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- df$get()
inv <- solve(data, ...)
df$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix(m)
cacheSolve(m)
source('/Volumes/momemory/Coursera/JHDSSpecialization/programming_assignments/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('/Volumes/momemory/Coursera/JHDSSpecialization/programming_assignments/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix()
make$set(m)
make$get()
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix()
make$set(m)
make$get()
make$getinv()
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix()
make$set(m)
make$get()
make$getinv()
cacheSolve(make)
make$getinv()
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix()
make$set(m)
make$get()
make$getinv()
print(cacheSolve(make))
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix()
make$set(m)
make$get()
make$getinv()
make$setinv()
print(cacheSolve(make))
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix()
make$set(m)
make$get()
make$getinv()
make$setinv()
cacheSolve(make)
make$getinv()
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix()
make$set(m)
make$get()
cacheSolve(make)
make$getinv()
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix(m)
make$set(m)
make$get()
cacheSolve(make)
make$getinv()
## Solution for second programming assignment
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(inv) i <<- inv
getinv <- function() i
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
m <- matrix(c(1,1,1,3,4,3,3,3,4), nrow=3,ncol=3)
make <- makeCacheMatrix(m)
make$set(m)
make$get()
cacheSolve(make)
make$getinv()
swirl::swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, n=10)
tail(plants, n=15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob=c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob = 0.7)
flips2 <- rbinom(c(0,1), 100, prob = 0.7)
flips2 <- rbinom(1, size=100, prob = 0.7)
flips2 <- rbinom(size=1, n=100, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, 25)
rnorm(10, 100, 25)
?rpois
rpois(10,5)
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
str(my_pois)
cm <- colMeans(my_pois)
hist(cm)
q
info()
swirl::swirl()
swirl::swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", yylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance", main="My Plot")
plot(cars,main="My Plot")
plot(cars,main="My Plot",sub="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
load(mtcars)
datasets::mtcars
data(mtcars)
play()
?boxplot
boxplot(data= mtcars, formula=mpg~cyl)
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
getwd()
setwd('~/Volumes/momemory')
setwd('/Volumes/momemory')
setwd("/Volumes/momemory/Coursera/JHDSSpecialization/programming_assignments/rprog_data_ProgAssignment3-data")
outcome <- read.csv('outcome-of-care-measures.csv', colClasses = 'character')
head(outcome)
ncol(outcome)
dom(outcome)
dim(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
colNames(outcome)
cols(outcome)
outcome.columns
columns(outcome)
outcome.cols
?colnames
colnames(outcome)
